<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\NBDevice.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\NBDevice.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Mon Jun 20 18:05:30 2022
<BR><P>
<H3>Maximum Stack Usage =        212 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
dataUploadRunner &rArr; svcPluginsGetTempHumi &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(.text.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(.text.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(.text.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from hal_uart.o(.text.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[23]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[22]">dataUploadRunner</a> from task_data_upload.o(.text.dataUploadRunner) referenced from task_data_upload.o(.text.taskDataUploadInit)
 <LI><a href="#[1e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[21]">svcMsgOnUart</a> from svc_msg.o(.text.svcMsgOnUart) referenced from svc_msg.o(.text.svcMsgInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttOpenCheck
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttConnectCheck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDefaultCheck
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5f]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttOpenCheck
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttConnectCheck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDefaultCheck
</UL>

<P><STRONG><a name="[60]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
</UL>

<P><STRONG><a name="[61]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWriteString
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsGetTempHumi
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[2c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[71]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[70]"></a>ADC_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[2e]"></a>ADC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_adc.o(.text.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[6f]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[72]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[6d]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f0xx_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[73]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[6a]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[30]"></a>AHT20GetData</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_dht20.o(.text.AHT20GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsGetTempHumi
</UL>

<P><STRONG><a name="[32]"></a>AHT20_RD_Byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_dht20.o(.text.AHT20_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AHT20_RD_Byte &rArr; SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_5us
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[31]"></a>AHT20_Read_CTdata_crc</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, hal_dht20.o(.text.AHT20_Read_CTdata_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC8
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[3b]"></a>AHT20_Read_Status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AHT20_Read_Status &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[39]"></a>AHT20_SendAC</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_SendAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[43]"></a>AHT20_Start_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
</UL>

<P><STRONG><a name="[3d]"></a>AHT20_WR_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_dht20.o(.text.AHT20_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4us
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[42]"></a>Calc_CRC8</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_dht20.o(.text.Calc_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calc_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[3a]"></a>Delay_1ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_1ms &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[46]"></a>Delay_4us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_4us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_4us &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>

<P><STRONG><a name="[37]"></a>Delay_5us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_5us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_5us &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[4a]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[86]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[38]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[85]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[4b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_dht20.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Start &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[48]"></a>Init_I2C_Sensor_Port</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hal_dht20.o(.text.Init_I2C_Sensor_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Init_I2C_Sensor_Port &rArr; AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[44]"></a>JH_Reset_REG</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hal_dht20.o(.text.JH_Reset_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f0xx_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text.RCC_ADCCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
</UL>

<P><STRONG><a name="[49]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[54]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[6b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[2f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[4c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[56]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[57]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[3e]"></a>Receive_ACK</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_dht20.o(.text.Receive_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Receive_ACK &rArr; SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[36]"></a>SCL_Pin_Output_High</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_dht20.o(.text.SCL_Pin_Output_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_Pin_Output_High
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[33]"></a>SCL_Pin_Output_Low</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_dht20.o(.text.SCL_Pin_Output_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_Pin_Output_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[34]"></a>SDA_Pin_IN_FLOATING</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_dht20.o(.text.SDA_Pin_IN_FLOATING))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[47]"></a>SDA_Pin_Output_High</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_dht20.o(.text.SDA_Pin_Output_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_Pin_Output_High &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>

<P><STRONG><a name="[45]"></a>SDA_Pin_Output_Low</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_dht20.o(.text.SDA_Pin_Output_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>

<P><STRONG><a name="[4f]"></a>SPI1_Transfer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_spi.o(.text.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
</UL>

<P><STRONG><a name="[89]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[53]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f0xx_spi.o(.text.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[50]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[87]"></a>SPI_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[52]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[88]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[51]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Send_ACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_dht20.o(.text.Send_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Send_ACK &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[40]"></a>Send_NOT_ACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_dht20.o(.text.Send_NOT_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Send_NOT_ACK &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[41]"></a>Stop_I2C</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_dht20.o(.text.Stop_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Stop_I2C &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[8a]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemInit
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_uart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>USART_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
</UL>

<P><STRONG><a name="[93]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
</UL>

<P><STRONG><a name="[58]"></a>USART_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>USART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
</UL>

<P><STRONG><a name="[5b]"></a>USART_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, stm32f0xx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
</UL>

<P><STRONG><a name="[59]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>USART_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
</UL>

<P><STRONG><a name="[69]"></a>halAdcInit</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, hal_adc.o(.text.halAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = halAdcInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[78]"></a>halLcdSpiInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_lcd_spi.o(.text.halLcdSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = halLcdSpiInit &rArr; halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[7b]"></a>halLcdSpiTxCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
</UL>

<P><STRONG><a name="[7e]"></a>halLcdSpiTxData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halLcdSpiTxData &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>

<P><STRONG><a name="[81]"></a>halOLED12864ClearScreen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = halOLED12864ClearScreen &rArr; halLcdSpiTxData &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWriteLcd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[77]"></a>halOLED12864Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_oled12864.o(.text.halOLED12864Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = halOLED12864Init &rArr; halLcdSpiInit &rArr; halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[83]"></a>halOLED12864ShowX16</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ShowX16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halOLED12864ShowX16 &rArr; halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWriteLcd
</UL>

<P><STRONG><a name="[7d]"></a>halSpiDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSpiDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[7c]"></a>halSpiEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSpiEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[79]"></a>halSpiInit</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, hal_spi.o(.text.halSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
</UL>

<P><STRONG><a name="[35]"></a>halSystemDelayUs</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_system.o(.text.halSystemDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_5us
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4us
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
</UL>

<P><STRONG><a name="[75]"></a>halSystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_system.o(.text.halSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[76]"></a>halUartInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.halUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[9b]"></a>halUartSetIRQCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(.text.halUartSetIRQCallback))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgInit
</UL>

<P><STRONG><a name="[91]"></a>halUartWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_uart.o(.text.halUartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWriteString
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; halInit &rArr; halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskPoll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[99]"></a>svcLogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_log.o(.text.svcLogInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[65]"></a>svcLogWriteLcd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, svc_log.o(.text.svcLogWriteLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcLogWriteLcd &rArr; halOLED12864ShowX16 &rArr; halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ShowX16
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[97]"></a>svcMsgInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, svc_msg.o(.text.svcMsgInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMsgInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartSetIRQCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[5e]"></a>svcMsgRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, svc_msg.o(.text.svcMsgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcMsgRead
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttOpenCheck
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttConnectCheck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDefaultCheck
</UL>

<P><STRONG><a name="[67]"></a>svcMsgWriteString</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, svc_msg.o(.text.svcMsgWriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcMsgWriteString &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[68]"></a>svcPluginsGetTempHumi</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, svc_plugins.o(.text.svcPluginsGetTempHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = svcPluginsGetTempHumi &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[9a]"></a>svcPluginsInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_plugins.o(.text.svcPluginsInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[9f]"></a>svcTaskAdd</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, svc_task.o(.text.svcTaskAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDataUploadInit
</UL>

<P><STRONG><a name="[98]"></a>svcTaskInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_task.o(.text.svcTaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[96]"></a>svcTaskPoll</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, svc_task.o(.text.svcTaskPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTaskPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>taskDataUploadInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_data_upload.o(.text.taskDataUploadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskDataUploadInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[a0]"></a>__0sprintf$3</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b0]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[66]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[55]"></a>SetSysClock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7a]"></a>halLcdSpiTxByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[7f]"></a>halOLED12864ChipInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = halOLED12864ChipInit &rArr; halOLED12864Reset &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[80]"></a>halOLED12864Reset</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_oled12864.o(.text.halOLED12864Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = halOLED12864Reset &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
</UL>

<P><STRONG><a name="[82]"></a>halOLED12864SetPosition</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_oled12864.o(.text.halOLED12864SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>

<P><STRONG><a name="[84]"></a>halOLEDShowChar8x16</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_oled12864.o(.text.halOLEDShowChar8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ShowX16
</UL>

<P><STRONG><a name="[8b]"></a>halUartGpioInit</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, hal_uart.o(.text.halUartGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = halUartGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[8c]"></a>halUartIRQInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_uart.o(.text.halUartIRQInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halUartIRQInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[8f]"></a>halUartParamInit</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, hal_uart.o(.text.halUartParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[21]"></a>svcMsgOnUart</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, svc_msg.o(.text.svcMsgOnUart))
<BR>[Address Reference Count : 1]<UL><LI> svc_msg.o(.text.svcMsgInit)
</UL>
<P><STRONG><a name="[74]"></a>halInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.halInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = halInit &rArr; halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halAdcInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>svcInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.svcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcInit &rArr; svcMsgInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>taskInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.taskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskInit &rArr; taskDataUploadInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDataUploadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>atDHCPCheck</STRONG> (Thumb, 112 bytes, Stack size 152 bytes, task_data_upload.o(.text.atDHCPCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atDHCPCheck &rArr; svcMsgRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[62]"></a>atDefaultCheck</STRONG> (Thumb, 60 bytes, Stack size 152 bytes, task_data_upload.o(.text.atDefaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atDefaultCheck &rArr; svcMsgRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[63]"></a>atMqttConnectCheck</STRONG> (Thumb, 68 bytes, Stack size 152 bytes, task_data_upload.o(.text.atMqttConnectCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atMqttConnectCheck &rArr; svcMsgRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[64]"></a>atMqttOpenCheck</STRONG> (Thumb, 72 bytes, Stack size 152 bytes, task_data_upload.o(.text.atMqttOpenCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atMqttOpenCheck &rArr; svcMsgRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataUploadRunner
</UL>

<P><STRONG><a name="[22]"></a>dataUploadRunner</STRONG> (Thumb, 1188 bytes, Stack size 24 bytes, task_data_upload.o(.text.dataUploadRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dataUploadRunner &rArr; svcPluginsGetTempHumi &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDHCPCheck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsGetTempHumi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWriteLcd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWriteString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttOpenCheck
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atMqttConnectCheck
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atDefaultCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_data_upload.o(.text.taskDataUploadInit)
</UL>
<P><STRONG><a name="[a1]"></a>_printf_core</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>

<P><STRONG><a name="[23]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
