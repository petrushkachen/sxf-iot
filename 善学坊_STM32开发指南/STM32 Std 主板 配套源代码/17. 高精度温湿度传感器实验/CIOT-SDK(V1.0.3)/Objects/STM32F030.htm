<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STM32F030.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STM32F030.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Sun May 15 11:08:10 2022
<BR><P>
<H3>Maximum Stack Usage =        236 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskSensorRunner &rArr; svcSensorGetTemp &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from hal_button.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(.text.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(.text.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(.text.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from hal_timer.o(.text.TIM3_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from hal_uart.o(.text.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[2a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[21]">svcButtonOnClick</a> from svc_button.o(.text.svcButtonOnClick) referenced from svc_button.o(.text.svcButtonInit)
 <LI><a href="#[24]">taskInputOnMsgRunner</a> from task_input.o(.text.taskInputOnMsgRunner) referenced from task_input.o(.text.taskInputInit)
 <LI><a href="#[22]">taskInputOnUart</a> from task_input.o(.text.taskInputOnUart) referenced from task_input.o(.text.taskInputInit)
 <LI><a href="#[23]">taskInputRunner</a> from task_input.o(.text.taskInputRunner) referenced from task_input.o(.text.taskInputInit)
 <LI><a href="#[25]">taskLcdRunner</a> from task_lcd.o(.text.taskLcdRunner) referenced from task_lcd.o(.text.taskLcdInit)
 <LI><a href="#[26]">taskLedRunner</a> from task_led.o(.text.taskLedRunner) referenced from task_led.o(.text.taskLedInit)
 <LI><a href="#[27]">taskSensorRunner</a> from task_sensor.o(.text.taskSensorRunner) referenced from task_sensor.o(.text.taskSensorInit)
 <LI><a href="#[28]">taskTestRunner</a> from task_test.o(.text.taskTestRunner) referenced from task_test.o(.text.taskTestInit)
 <LI><a href="#[29]">taskUartRunner</a> from task_uart.o(.text.taskUartRunner) referenced from task_uart.o(.text.taskUartInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputOnMsgRunner
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputOnMsgRunner
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorRunner
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[33]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ce]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[39]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[42]"></a>AHT20GetData</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_dht20.o(.text.AHT20GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetTemp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetHumi
</UL>

<P><STRONG><a name="[44]"></a>AHT20_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hal_dht20.o(.text.AHT20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AHT20_Init &rArr; Init_I2C_Sensor_Port &rArr; AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[4b]"></a>AHT20_RD_Byte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal_dht20.o(.text.AHT20_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AHT20_RD_Byte &rArr; SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_5us
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[43]"></a>AHT20_Read_CTdata_crc</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, hal_dht20.o(.text.AHT20_Read_CTdata_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRC8
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>

<P><STRONG><a name="[53]"></a>AHT20_Read_Status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AHT20_Read_Status &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[52]"></a>AHT20_SendAC</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_SendAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[57]"></a>AHT20_Start_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_dht20.o(.text.AHT20_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
</UL>

<P><STRONG><a name="[47]"></a>AHT20_WR_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_dht20.o(.text.AHT20_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4us
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[56]"></a>Calc_CRC8</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_dht20.o(.text.Calc_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calc_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[4a]"></a>Delay_1ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_1ms &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[5a]"></a>Delay_4us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_4us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_4us &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
</UL>

<P><STRONG><a name="[50]"></a>Delay_5us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_dht20.o(.text.Delay_5us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_5us &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_button.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_exti.o(.text.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>EXTI_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f0xx_exti.o(.text.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[51]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedToggle
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[63]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedToggle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[60]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedToggle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_dht20.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Start &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[45]"></a>Init_I2C_Sensor_Port</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hal_dht20.o(.text.Init_I2C_Sensor_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Init_I2C_Sensor_Port &rArr; AHT20_Start_Init &rArr; JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[58]"></a>JH_Reset_REG</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hal_dht20.o(.text.JH_Reset_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = JH_Reset_REG &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Start_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f0xx_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[69]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[61]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6c]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[6d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[48]"></a>Receive_ACK</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_dht20.o(.text.Receive_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Receive_ACK &rArr; SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[4f]"></a>SCL_Pin_Output_High</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_dht20.o(.text.SCL_Pin_Output_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_Pin_Output_High
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>

<P><STRONG><a name="[4c]"></a>SCL_Pin_Output_Low</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_dht20.o(.text.SCL_Pin_Output_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_Pin_Output_Low
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>

<P><STRONG><a name="[4d]"></a>SDA_Pin_IN_FLOATING</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_dht20.o(.text.SDA_Pin_IN_FLOATING))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_Pin_IN_FLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>

<P><STRONG><a name="[5b]"></a>SDA_Pin_Output_High</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_dht20.o(.text.SDA_Pin_Output_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_Pin_Output_High &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_Sensor_Port
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
</UL>

<P><STRONG><a name="[59]"></a>SDA_Pin_Output_Low</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_dht20.o(.text.SDA_Pin_Output_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>

<P><STRONG><a name="[64]"></a>SPI1_Transfer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_spi.o(.text.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
</UL>

<P><STRONG><a name="[90]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[68]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f0xx_spi.o(.text.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[65]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[8e]"></a>SPI_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[67]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[8f]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[66]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f0xx_syscfg.o(.text.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>

<P><STRONG><a name="[54]"></a>Send_ACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_dht20.o(.text.Send_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Send_ACK &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_IN_FLOATING
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[55]"></a>Send_NOT_ACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_dht20.o(.text.Send_NOT_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Send_NOT_ACK &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_Low
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
</UL>

<P><STRONG><a name="[49]"></a>Stop_I2C</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_dht20.o(.text.Stop_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Stop_I2C &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_Low
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Pin_Output_High
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Pin_Output_High
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JH_Reset_REG
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_SendAC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_Status
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
</UL>

<P><STRONG><a name="[91]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemInit
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_timer.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>TIM_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_uart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>USART_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
</UL>

<P><STRONG><a name="[99]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
</UL>

<P><STRONG><a name="[70]"></a>USART_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>USART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
</UL>

<P><STRONG><a name="[73]"></a>USART_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, stm32f0xx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
</UL>

<P><STRONG><a name="[71]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>USART_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
</UL>

<P><STRONG><a name="[74]"></a>halButtonInit</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, hal_button.o(.text.halButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = halButtonInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[9e]"></a>halButtonSetCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_button.o(.text.halButtonSetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcButtonInit
</UL>

<P><STRONG><a name="[7d]"></a>halLcdSpiInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_lcd_spi.o(.text.halLcdSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = halLcdSpiInit &rArr; halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[80]"></a>halLcdSpiTxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
</UL>

<P><STRONG><a name="[83]"></a>halLcdSpiTxData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halLcdSpiTxData &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>

<P><STRONG><a name="[7b]"></a>halLedInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_led.o(.text.halLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = halLedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[84]"></a>halLedToggle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_led.o(.text.halLedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halLedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsToggleLed
</UL>

<P><STRONG><a name="[87]"></a>halOLED12864ClearScreen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = halOLED12864ClearScreen &rArr; halLcdSpiTxData &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[7c]"></a>halOLED12864Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_oled12864.o(.text.halOLED12864Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = halOLED12864Init &rArr; halLcdSpiInit &rArr; halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ClearScreen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[89]"></a>halOLED12864ShowX16</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ShowX16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halOLED12864ShowX16 &rArr; halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsLcdWrite
</UL>

<P><STRONG><a name="[82]"></a>halSpiDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSpiDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[81]"></a>halSpiEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSpiEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[7e]"></a>halSpiInit</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, hal_spi.o(.text.halSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiInit
</UL>

<P><STRONG><a name="[4e]"></a>halSystemDelayUs</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_system.o(.text.halSystemDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_ACK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_5us
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4us
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_WR_Byte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Read_CTdata_crc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_RD_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2C
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_NOT_ACK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ACK
</UL>

<P><STRONG><a name="[79]"></a>halSystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_system.o(.text.halSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[7a]"></a>halUartInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.halUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartParamInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartIRQInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[a7]"></a>halUartSetIRQCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(.text.halUartSetIRQCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsSetUartCallback
</UL>

<P><STRONG><a name="[97]"></a>halUartWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_uart.o(.text.halUartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; halInit &rArr; halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b4]"></a>svcButtonClickTimes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svc_button.o(.text.svcButtonClickTimes))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputRunner
</UL>

<P><STRONG><a name="[b5]"></a>svcButtonClickTimesClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svc_button.o(.text.svcButtonClickTimesClear))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputRunner
</UL>

<P><STRONG><a name="[9d]"></a>svcButtonInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, svc_button.o(.text.svcButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcButtonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonSetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[a0]"></a>svcLogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_log.o(.text.svcLogInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[a3]"></a>svcLogWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, svc_log.o(.text.svcLogWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcLogWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputRunner
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputOnMsgRunner
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUartRunner
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTestRunner
</UL>

<P><STRONG><a name="[a1]"></a>svcPluginsInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_plugins.o(.text.svcPluginsInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[a5]"></a>svcPluginsLcdWrite</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, svc_plugins.o(.text.svcPluginsLcdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcPluginsLcdWrite &rArr; halOLED12864ShowX16 &rArr; halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ShowX16
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorRunner
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLcdRunner
</UL>

<P><STRONG><a name="[a6]"></a>svcPluginsSetUartCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_plugins.o(.text.svcPluginsSetUartCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcPluginsSetUartCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartSetIRQCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputInit
</UL>

<P><STRONG><a name="[a8]"></a>svcPluginsToggleLed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_plugins.o(.text.svcPluginsToggleLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcPluginsToggleLed &rArr; halLedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLedRunner
</UL>

<P><STRONG><a name="[a9]"></a>svcSensorGetHumi</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, svc_sensor.o(.text.svcSensorGetHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = svcSensorGetHumi &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorRunner
</UL>

<P><STRONG><a name="[aa]"></a>svcSensorGetTemp</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, svc_sensor.o(.text.svcSensorGetTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = svcSensorGetTemp &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorRunner
</UL>

<P><STRONG><a name="[a2]"></a>svcSensorInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_sensor.o(.text.svcSensorInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[b1]"></a>svcTaskAdd</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, svc_task.o(.text.svcTaskAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLcdInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUartInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLedInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTestInit
</UL>

<P><STRONG><a name="[9f]"></a>svcTaskInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_task.o(.text.svcTaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcInit
</UL>

<P><STRONG><a name="[9c]"></a>svcTaskPoll</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, svc_task.o(.text.svcTaskPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTaskPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>taskInputInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, task_input.o(.text.taskInputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskInputInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsSetUartCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[ad]"></a>taskLcdInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_lcd.o(.text.taskLcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskLcdInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[ac]"></a>taskLedInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_led.o(.text.taskLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskLedInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[b0]"></a>taskSensorInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_sensor.o(.text.taskSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskSensorInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[ab]"></a>taskTestInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_test.o(.text.taskTestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskTestInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[ae]"></a>taskUartInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_uart.o(.text.taskUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskUartInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInit
</UL>

<P><STRONG><a name="[b8]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorRunner
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLcdRunner
</UL>

<P><STRONG><a name="[d0]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d1]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[41]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>SetSysClock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7f]"></a>halLcdSpiTxByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_lcd_spi.o(.text.halLcdSpiTxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>

<P><STRONG><a name="[85]"></a>halOLED12864ChipInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, hal_oled12864.o(.text.halOLED12864ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = halOLED12864ChipInit &rArr; halOLED12864Reset &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
</UL>

<P><STRONG><a name="[86]"></a>halOLED12864Reset</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_oled12864.o(.text.halOLED12864Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = halOLED12864Reset &rArr; halSystemDelayUs &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ChipInit
</UL>

<P><STRONG><a name="[88]"></a>halOLED12864SetPosition</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_oled12864.o(.text.halOLED12864SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLEDShowChar8x16
</UL>

<P><STRONG><a name="[8a]"></a>halOLEDShowChar8x16</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_oled12864.o(.text.halOLEDShowChar8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864SetPosition
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLcdSpiTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864ShowX16
</UL>

<P><STRONG><a name="[92]"></a>halUartGpioInit</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, hal_uart.o(.text.halUartGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = halUartGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[93]"></a>halUartIRQInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_uart.o(.text.halUartIRQInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halUartIRQInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[95]"></a>halUartParamInit</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, hal_uart.o(.text.halUartParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[21]"></a>svcButtonOnClick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_button.o(.text.svcButtonOnClick))
<BR>[Address Reference Count : 1]<UL><LI> svc_button.o(.text.svcButtonInit)
</UL>
<P><STRONG><a name="[28]"></a>taskTestRunner</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_test.o(.text.taskTestRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = taskTestRunner &rArr; svcLogWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_test.o(.text.taskTestInit)
</UL>
<P><STRONG><a name="[26]"></a>taskLedRunner</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_led.o(.text.taskLedRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = taskLedRunner &rArr; svcPluginsToggleLed &rArr; halLedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsToggleLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_led.o(.text.taskLedInit)
</UL>
<P><STRONG><a name="[29]"></a>taskUartRunner</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_uart.o(.text.taskUartRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = taskUartRunner &rArr; svcLogWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_uart.o(.text.taskUartInit)
</UL>
<P><STRONG><a name="[25]"></a>taskLcdRunner</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, task_lcd.o(.text.taskLcdRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = taskLcdRunner &rArr; svcPluginsLcdWrite &rArr; halOLED12864ShowX16 &rArr; halOLEDShowChar8x16 &rArr; halOLED12864SetPosition &rArr; halLcdSpiTxCmd &rArr; halLcdSpiTxByte &rArr; SPI1_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsLcdWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_lcd.o(.text.taskLcdInit)
</UL>
<P><STRONG><a name="[24]"></a>taskInputOnMsgRunner</STRONG> (Thumb, 44 bytes, Stack size 144 bytes, task_input.o(.text.taskInputOnMsgRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = taskInputOnMsgRunner &rArr; svcLogWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_input.o(.text.taskInputInit)
</UL>
<P><STRONG><a name="[22]"></a>taskInputOnUart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_input.o(.text.taskInputOnUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = taskInputOnUart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_input.o(.text.taskInputInit)
</UL>
<P><STRONG><a name="[23]"></a>taskInputRunner</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, task_input.o(.text.taskInputRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = taskInputRunner &rArr; svcLogWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcButtonClickTimesClear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcButtonClickTimes
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_input.o(.text.taskInputInit)
</UL>
<P><STRONG><a name="[27]"></a>taskSensorRunner</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, task_sensor.o(.text.taskSensorRunner))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = taskSensorRunner &rArr; svcSensorGetTemp &rArr; AHT20GetData &rArr; AHT20_Read_CTdata_crc &rArr; AHT20_SendAC &rArr; AHT20_WR_Byte &rArr; SDA_Pin_Output_Low &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetTemp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetHumi
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsLcdWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sensor.o(.text.taskSensorInit)
</UL>
<P><STRONG><a name="[78]"></a>halInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.halInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = halInit &rArr; halUartInit &rArr; halUartParamInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT20_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystemInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halOLED12864Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halLedInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halButtonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>svcInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.svcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcInit &rArr; svcButtonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcButtonInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPluginsInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcLogInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>taskInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.taskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = taskInit &rArr; taskInputInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSensorInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskInputInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLcdInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUartInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLedInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTestInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b9]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[bd]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
