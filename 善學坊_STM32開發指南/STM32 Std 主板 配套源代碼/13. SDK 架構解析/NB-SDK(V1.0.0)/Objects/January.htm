<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\January.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\January.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Fri Mar 12 16:39:04 2021
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskSim868IncomingHandler &rArr; taskSim868ViewGnssHandler &rArr; taskSim868GnssInfoParser &rArr; svcSim868Parser &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from hal_uart.o(.text.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(.text.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(.text.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(.text.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[22]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[21]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[23]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[29]">svcSim868OnMsgTask</a> from svc_sim868.o(.text.svcSim868OnMsgTask) referenced from svc_sim868.o(.text.svcSim868Poll)
 <LI><a href="#[28]">svcSim868RunningTask</a> from svc_sim868.o(.text.svcSim868RunningTask) referenced from svc_sim868.o(.text.svcSim868Init)
 <LI><a href="#[27]">svcSim868Sender</a> from svc_sim868.o(.text.svcSim868Sender) referenced from svc_sim868.o(.text.svcSim868Init)
 <LI><a href="#[2a]">svcSim868TimeoutTask</a> from svc_sim868.o(.text.svcSim868TimeoutTask) referenced from svc_sim868.o(.text.svcSim868Sender)
 <LI><a href="#[2c]">taskMqttLoop</a> from task_mqtt.o(.text.taskMqttLoop) referenced from task_mqtt.o(.text.taskMqttInit)
 <LI><a href="#[2d]">taskMqttOnSend</a> from task_mqtt.o(.text.taskMqttOnSend) referenced from task_mqtt.o(.text.taskMqttSender)
 <LI><a href="#[2b]">taskMqttSender</a> from task_mqtt.o(.text.taskMqttSender) referenced from task_mqtt.o(.text.taskMqttInit)
 <LI><a href="#[2e]">taskSchdProxy</a> from task_schd.o(.text.taskSchdProxy) referenced from task_schd.o(.text.taskSchdPoll)
 <LI><a href="#[30]">taskSim868ErrorHandler</a> from task_sim868.o(.text.taskSim868ErrorHandler) referenced from task_sim868.o(.text.taskSim868Init)
 <LI><a href="#[31]">taskSim868IncomingHandler</a> from task_sim868.o(.text.taskSim868IncomingHandler) referenced from task_sim868.o(.text.taskSim868Init)
 <LI><a href="#[33]">taskSim868Loop</a> from task_sim868.o(.text.taskSim868Loop) referenced from task_sim868.o(.text.taskSim868Init)
 <LI><a href="#[2f]">taskSim868TimeoutHandler</a> from task_sim868.o(.text.taskSim868TimeoutHandler) referenced from task_sim868.o(.text.taskSim868Init)
 <LI><a href="#[32]">taskSim868ViewBasisStart</a> from task_sim868.o(.text.taskSim868ViewBasisStart) referenced from task_sim868.o(.text.taskSim868Init)
 <LI><a href="#[32]">taskSim868ViewBasisStart</a> from task_sim868.o(.text.taskSim868ViewBasisStart) referenced from task_sim868.o(.text.taskSim868TimeoutHandler)
 <LI><a href="#[32]">taskSim868ViewBasisStart</a> from task_sim868.o(.text.taskSim868ViewBasisStart) referenced from task_sim868.o(.text.taskSim868ViewNetworkHandler)
 <LI><a href="#[32]">taskSim868ViewBasisStart</a> from task_sim868.o(.text.taskSim868ViewBasisStart) referenced from task_sim868.o(.text.taskSim868ViewTcpClientHandler)
 <LI><a href="#[34]">taskSim868ViewBtStart</a> from task_sim868.o(.text.taskSim868ViewBtStart) referenced from task_sim868.o(.text.taskSim868Loop)
 <LI><a href="#[34]">taskSim868ViewBtStart</a> from task_sim868.o(.text.taskSim868ViewBtStart) referenced from task_sim868.o(.text.taskSim868ViewBasisHandler)
 <LI><a href="#[34]">taskSim868ViewBtStart</a> from task_sim868.o(.text.taskSim868ViewBtStart) referenced from task_sim868.o(.text.taskSim868ViewNetworkHandler)
 <LI><a href="#[34]">taskSim868ViewBtStart</a> from task_sim868.o(.text.taskSim868ViewBtStart) referenced from task_sim868.o(.text.taskSim868ViewTcpClientHandler)
 <LI><a href="#[37]">taskSim868ViewGnssStart</a> from task_sim868.o(.text.taskSim868ViewGnssStart) referenced from task_sim868.o(.text.taskSim868ViewBasisHandler)
 <LI><a href="#[37]">taskSim868ViewGnssStart</a> from task_sim868.o(.text.taskSim868ViewGnssStart) referenced from task_sim868.o(.text.taskSim868ViewBtHandler)
 <LI><a href="#[37]">taskSim868ViewGnssStart</a> from task_sim868.o(.text.taskSim868ViewGnssStart) referenced from task_sim868.o(.text.taskSim868ViewNetworkHandler)
 <LI><a href="#[37]">taskSim868ViewGnssStart</a> from task_sim868.o(.text.taskSim868ViewGnssStart) referenced from task_sim868.o(.text.taskSim868ViewTcpClientHandler)
 <LI><a href="#[36]">taskSim868ViewNetworkStart</a> from task_sim868.o(.text.taskSim868ViewNetworkStart) referenced from task_sim868.o(.text.taskSim868Loop)
 <LI><a href="#[36]">taskSim868ViewNetworkStart</a> from task_sim868.o(.text.taskSim868ViewNetworkStart) referenced from task_sim868.o(.text.taskSim868ViewBasisHandler)
 <LI><a href="#[36]">taskSim868ViewNetworkStart</a> from task_sim868.o(.text.taskSim868ViewNetworkStart) referenced from task_sim868.o(.text.taskSim868ViewNetworkHandler)
 <LI><a href="#[36]">taskSim868ViewNetworkStart</a> from task_sim868.o(.text.taskSim868ViewNetworkStart) referenced from task_sim868.o(.text.taskSim868ViewTcpClientHandler)
 <LI><a href="#[35]">taskSim868ViewTcpClientStart</a> from task_sim868.o(.text.taskSim868ViewTcpClientStart) referenced from task_sim868.o(.text.taskSim868Loop)
 <LI><a href="#[35]">taskSim868ViewTcpClientStart</a> from task_sim868.o(.text.taskSim868ViewTcpClientStart) referenced from task_sim868.o(.text.taskSim868ViewBasisHandler)
 <LI><a href="#[35]">taskSim868ViewTcpClientStart</a> from task_sim868.o(.text.taskSim868ViewTcpClientStart) referenced from task_sim868.o(.text.taskSim868ViewBtHandler)
 <LI><a href="#[35]">taskSim868ViewTcpClientStart</a> from task_sim868.o(.text.taskSim868ViewTcpClientStart) referenced from task_sim868.o(.text.taskSim868ViewNetworkHandler)
 <LI><a href="#[35]">taskSim868ViewTcpClientStart</a> from task_sim868.o(.text.taskSim868ViewTcpClientStart) referenced from task_sim868.o(.text.taskSim868ViewTcpClientHandler)
 <LI><a href="#[38]">taskTimerStart</a> from task_timer.o(.text.taskTimerStart) referenced from task_timer.o(.text.taskTimerInit)
 <LI><a href="#[24]">user_delay_us</a> from hal_bme280.o(.text.user_delay_us) referenced from hal_bme280.o(.text.halBme280Init)
 <LI><a href="#[26]">user_spi_read</a> from hal_bme280.o(.text.user_spi_read) referenced from hal_bme280.o(.text.halBme280Init)
 <LI><a href="#[25]">user_spi_write</a> from hal_bme280.o(.text.user_spi_write) referenced from hal_bme280.o(.text.halBme280Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[133]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[134]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[135]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[136]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[137]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttPublish
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonBuildNode
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868OnMsgTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkIpParser
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[105]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Parser
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBasisHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkRegisterParser
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkIpParser
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868LQIParser
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>

<P><STRONG><a name="[11f]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkIpParser
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>

<P><STRONG><a name="[120]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkIpParser
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>

<P><STRONG><a name="[6e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpPreSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetBtTxPwr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetAPN
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSubscribe
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttPublish
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddValue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868RunningTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868QueueAdd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttReport
</UL>

<P><STRONG><a name="[71]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpPreSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetBtTxPwr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetAPN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddValue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDid
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868QueueAdd
</UL>

<P><STRONG><a name="[3e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Parser
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Save
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dcmple</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dcmplt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dcmpge</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Parser
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Fitting
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod$div0
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_idivmod$div0</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[40]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[140]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[42]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[4a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[49]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[23]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[60]"></a>_scanf_really_real</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[21]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[142]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a1]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[ac]"></a>ADC_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
</UL>

<P><STRONG><a name="[a3]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[9e]"></a>ADC_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[63]"></a>ADC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_adc.o(.text.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[a2]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[aa]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
</UL>

<P><STRONG><a name="[a4]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[a0]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f0xx_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[a9]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
</UL>

<P><STRONG><a name="[ab]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_StopOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
</UL>

<P><STRONG><a name="[9f]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_uart.o(.text.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartTxPoll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[66]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[d3]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartRead
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[cd]"></a>DMA_DeInit</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[da]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartRead
</UL>

<P><STRONG><a name="[dc]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartTxPoll
</UL>

<P><STRONG><a name="[65]"></a>DMA_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>DMA_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[cf]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f0xx_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GpiosInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpiosInit
</UL>

<P><STRONG><a name="[bc]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpiosInit
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GpiosInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f0xx_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaInit
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text.RCC_ADCCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>

<P><STRONG><a name="[b0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GpiosInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpiosInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaInit
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[9c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUart1Init
</UL>

<P><STRONG><a name="[64]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[67]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[bf]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[69]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f0xx_spi.o(.text.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[c1]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiTransfer
</UL>

<P><STRONG><a name="[bd]"></a>SPI_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[c3]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiTransfer
</UL>

<P><STRONG><a name="[be]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
</UL>

<P><STRONG><a name="[c2]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiTransfer
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickInit
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartRead
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUart1Init
</UL>

<P><STRONG><a name="[c7]"></a>USART_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUart1Init
</UL>

<P><STRONG><a name="[d2]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>

<P><STRONG><a name="[d9]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartRead
</UL>

<P><STRONG><a name="[6c]"></a>USART_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, stm32f0xx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUart1Init
</UL>

<P><STRONG><a name="[6d]"></a>atspSend</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, atsp.o(.text.atspSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atspSend &rArr; atspSendStream
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSendStream
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpPreSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetBtTxPwr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetAPN
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientStart
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewGnssStart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBtStart
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBasisStart
</UL>

<P><STRONG><a name="[6f]"></a>atspSendStream</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, atsp.o(.text.atspSendStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atspSendStream
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientStart
</UL>

<P><STRONG><a name="[70]"></a>atspSetAPN</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, atsp.o(.text.atspSetAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atspSetAPN &rArr; atspSend &rArr; atspSendStream
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkStart
</UL>

<P><STRONG><a name="[72]"></a>atspSetBtTxPwr</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, atsp.o(.text.atspSetBtTxPwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = atspSetBtTxPwr &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBtStart
</UL>

<P><STRONG><a name="[102]"></a>atspSetSender</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atsp.o(.text.atspSetSender))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Init
</UL>

<P><STRONG><a name="[74]"></a>atspTcpConnect</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, atsp.o(.text.atspTcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atspTcpConnect &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientStart
</UL>

<P><STRONG><a name="[75]"></a>atspTcpPreSend</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, atsp.o(.text.atspTcpPreSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = atspTcpPreSend &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientStart
</UL>

<P><STRONG><a name="[76]"></a>bme280_compensate_data</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280.o(.text.bme280_compensate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[7a]"></a>bme280_get_regs</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bme280.o(.text.bme280_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[7c]"></a>bme280_get_sensor_data</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, bme280.o(.text.bme280_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_parse_sensor_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_forced_mode
</UL>

<P><STRONG><a name="[7e]"></a>bme280_get_sensor_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bme280.o(.text.bme280_get_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bme280_get_sensor_mode &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[7f]"></a>bme280_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bme280.o(.text.bme280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bme280_init &rArr; bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Init
</UL>

<P><STRONG><a name="[7d]"></a>bme280_parse_sensor_data</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bme280.o(.text.bme280_parse_sensor_data))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[82]"></a>bme280_set_regs</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, bme280.o(.text.bme280_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_reg_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
</UL>

<P><STRONG><a name="[84]"></a>bme280_set_sensor_mode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bme280.o(.text.bme280_set_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bme280_set_sensor_mode &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_forced_mode
</UL>

<P><STRONG><a name="[87]"></a>bme280_set_sensor_settings</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bme280.o(.text.bme280_set_sensor_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_settings_changed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_forced_mode
</UL>

<P><STRONG><a name="[80]"></a>bme280_soft_reset</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bme280.o(.text.bme280_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[8f]"></a>ftoa</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, utils.o(.text.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ftoa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddFloat
</UL>

<P><STRONG><a name="[117]"></a>getDid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utils.o(.text.getDid))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttLoop
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[ff]"></a>halBme280GetCelsius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_bme280.o(.text.halBme280GetCelsius))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetTemp
</UL>

<P><STRONG><a name="[fb]"></a>halBme280GetHumidity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_bme280.o(.text.halBme280GetHumidity))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetHumi
</UL>

<P><STRONG><a name="[fd]"></a>halBme280GetPressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_bme280.o(.text.halBme280GetPressure))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetPressure
</UL>

<P><STRONG><a name="[92]"></a>halBme280Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_bme280.o(.text.halBme280Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = halBme280Init &rArr; bme280_init &rArr; bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[93]"></a>halBme280Poll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_bme280.o(.text.halBme280Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = halBme280Poll &rArr; stream_sensor_data_forced_mode &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_forced_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorPoll
</UL>

<P><STRONG><a name="[b2]"></a>halPM25Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_pm25.o(.text.halPM25Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = halPM25Init &rArr; halPM25AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GpiosInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[b3]"></a>halPM25Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_pm25.o(.text.halPM25Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = halPM25Read &rArr; halPM25Adc2Pm25 &rArr; halPM25Adc2Voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetFitValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorPoll
</UL>

<P><STRONG><a name="[b4]"></a>halPM25ReadAsAQI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_pm25.o(.text.halPM25ReadAsAQI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = halPM25ReadAsAQI &rArr; halPM25ToAQIRefCN &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ToAQIRefCN
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorPoll
</UL>

<P><STRONG><a name="[b7]"></a>halSim868Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hal_sim868.o(.text.halSim868Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = halSim868Init &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[b8]"></a>halSpiDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halSpiDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_write
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_read
</UL>

<P><STRONG><a name="[b9]"></a>halSpiEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_spi.o(.text.halSpiEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halSpiEnable &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_write
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_read
</UL>

<P><STRONG><a name="[bb]"></a>halSpiInit</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, hal_spi.o(.text.halSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = halSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c0]"></a>halSpiTransfer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hal_spi.o(.text.halSpiTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halSpiTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_write
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_read
</UL>

<P><STRONG><a name="[108]"></a>halSystickClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_systick.o(.text.halSystickClock))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
</UL>

<P><STRONG><a name="[a8]"></a>halSystickDelay</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hal_systick.o(.text.halSystickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSystickLoop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetFitValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delay_us
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
</UL>

<P><STRONG><a name="[c4]"></a>halSystickInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_systick.o(.text.halSystickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halSystickInit &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[109]"></a>halSystickInterval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_systick.o(.text.halSystickInterval))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
</UL>

<P><STRONG><a name="[d4]"></a>halUartForceWrite</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.halUartForceWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halUartForceWrite &rArr; halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
</UL>

<P><STRONG><a name="[d7]"></a>halUartInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.halUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = halUartInit &rArr; halUart1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartGpiosInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUart1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[d8]"></a>halUartRead</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, hal_uart.o(.text.halUartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halUartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
</UL>

<P><STRONG><a name="[f9]"></a>halUartTxBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(.text.halUartTxBusy))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
</UL>

<P><STRONG><a name="[db]"></a>halUartTxPoll</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_uart.o(.text.halUartTxPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halUartTxPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
</UL>

<P><STRONG><a name="[d5]"></a>halUartWrite</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_uart.o(.text.halUartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halUartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartForceWrite
</UL>

<P><STRONG><a name="[73]"></a>itoa</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, utils.o(.text.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpPreSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetBtTxPwr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddInt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[df]"></a>jsonAddFloat</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, json.o(.text.jsonAddFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = jsonAddFloat &rArr; ftoa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddValue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[e1]"></a>jsonAddInt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, json.o(.text.jsonAddInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jsonAddInt &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddValue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[e2]"></a>jsonAddString</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, json.o(.text.jsonAddString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jsonAddString &rArr; jsonAddValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[e3]"></a>jsonBuildNode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, json.o(.text.jsonBuildNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jsonBuildNode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; hal_init &rArr; halUartInit &rArr; halUart1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSchdPoll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e7]"></a>mqttConnect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mqtt.o(.text.mqttConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mqttConnect &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttLoop
</UL>

<P><STRONG><a name="[e9]"></a>mqttHearbeat</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mqtt.o(.text.mqttHearbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mqttHearbeat &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttLoop
</UL>

<P><STRONG><a name="[ea]"></a>mqttPublish</STRONG> (Thumb, 92 bytes, Stack size 152 bytes, mqtt.o(.text.mqttPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mqttPublish &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttReport
</UL>

<P><STRONG><a name="[116]"></a>mqttSetSender</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt.o(.text.mqttSetSender))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttInit
</UL>

<P><STRONG><a name="[ec]"></a>mqttSubscribe</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, mqtt.o(.text.mqttSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mqttSubscribe &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSeq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttLoop
</UL>

<P><STRONG><a name="[f0]"></a>setDid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utils.o(.text.setDid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setDid
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>

<P><STRONG><a name="[111]"></a>svcMsgInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_msg.o(.text.svcMsgInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
</UL>

<P><STRONG><a name="[f7]"></a>svcMsgRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_msg.o(.text.svcMsgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcMsgRead &rArr; halUartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
</UL>

<P><STRONG><a name="[f8]"></a>svcMsgWrite</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, svc_msg.o(.text.svcMsgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcMsgWrite &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartTxPoll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartTxBusy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartForceWrite
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Sender
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868RunningTask
</UL>

<P><STRONG><a name="[12e]"></a>svcSensorGetAQI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svc_sensor.o(.text.svcSensorGetAQI))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[fa]"></a>svcSensorGetHumi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_sensor.o(.text.svcSensorGetHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSensorGetHumi
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280GetHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[fc]"></a>svcSensorGetPressure</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_sensor.o(.text.svcSensorGetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSensorGetPressure
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280GetPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[fe]"></a>svcSensorGetTemp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, svc_sensor.o(.text.svcSensorGetTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSensorGetTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280GetCelsius
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[112]"></a>svcSensorInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svc_sensor.o(.text.svcSensorInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
</UL>

<P><STRONG><a name="[100]"></a>svcSensorPoll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, svc_sensor.o(.text.svcSensorPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = svcSensorPoll &rArr; halBme280Poll &rArr; stream_sensor_data_forced_mode &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ReadAsAQI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
</UL>

<P><STRONG><a name="[101]"></a>svcSim868Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, svc_sim868.o(.text.svcSim868Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcSim868Init &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetSender
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
</UL>

<P><STRONG><a name="[104]"></a>svcSim868Parser</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, svc_sim868.o(.text.svcSim868Parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = svcSim868Parser &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[107]"></a>svcSim868Poll</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, svc_sim868.o(.text.svcSim868Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSim868Poll &rArr; svcMsgRead &rArr; halUartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskRemove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickInterval
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSchdProxy
</UL>

<P><STRONG><a name="[128]"></a>svcSim868SetErrorCB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, svc_sim868.o(.text.svcSim868SetErrorCB))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Init
</UL>

<P><STRONG><a name="[129]"></a>svcSim868SetIncomingCB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, svc_sim868.o(.text.svcSim868SetIncomingCB))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Init
</UL>

<P><STRONG><a name="[127]"></a>svcSim868SetTimeoutCB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, svc_sim868.o(.text.svcSim868SetTimeoutCB))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Init
</UL>

<P><STRONG><a name="[10f]"></a>svcSystickInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_systick.o(.text.svcSystickInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
</UL>

<P><STRONG><a name="[10e]"></a>svcSystickLoop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, svc_systick.o(.text.svcSystickLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcSystickLoop &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSchdPoll
</UL>

<P><STRONG><a name="[103]"></a>svcTaskAdd</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, svc_task.o(.text.svcTaskAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Sender
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868RunningTask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBtHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBasisHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868TimeoutHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Loop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ErrorHandler
</UL>

<P><STRONG><a name="[110]"></a>svcTaskInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_task.o(.text.svcTaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_init
</UL>

<P><STRONG><a name="[11b]"></a>svcTaskPoll</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, svc_task.o(.text.svcTaskPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTaskPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSchdPoll
</UL>

<P><STRONG><a name="[10a]"></a>svcTaskRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, svc_task.o(.text.svcTaskRemove))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
</UL>

<P><STRONG><a name="[113]"></a>taskMqttFetch</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, task_mqtt.o(.text.taskMqttFetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = taskMqttFetch &rArr; taskSim868BtSetTxpwr &rArr; taskSim868AddView
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868BtSetTxpwr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[115]"></a>taskMqttInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_mqtt.o(.text.taskMqttInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskMqttInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSetSender
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[118]"></a>taskMqttReport</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, task_mqtt.o(.text.taskMqttReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = taskMqttReport &rArr; mqttPublish &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttPublish
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>

<P><STRONG><a name="[12f]"></a>taskSchdInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_schd.o(.text.taskSchdInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[e6]"></a>taskSchdPoll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_schd.o(.text.taskSchdPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = taskSchdPoll &rArr; svcSystickLoop &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskPoll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSystickLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>taskSim868BtSetTxpwr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868BtSetTxpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = taskSim868BtSetTxpwr &rArr; taskSim868AddView
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868AddView
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttFetch
</UL>

<P><STRONG><a name="[126]"></a>taskSim868Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskSim868Init &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868SetTimeoutCB
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868SetIncomingCB
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868SetErrorCB
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[119]"></a>taskSim868TcpSendReq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, task_sim868.o(.text.taskSim868TcpSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = taskSim868TcpSendReq &rArr; taskSim868AddView
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868AddView
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttSender
</UL>

<P><STRONG><a name="[12d]"></a>taskTimerInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_timer.o(.text.taskTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskTimerInit &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[5b]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[143]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[130]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[144]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[145]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[146]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[131]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[61]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[106]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Parser
</UL>

<P><STRONG><a name="[10d]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868RunningTask
</UL>

<P><STRONG><a name="[10c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868QueueAdd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>SetSysClock</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, system_stm32f0xx.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[dd]"></a>hal_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_init &rArr; halUartInit &rArr; halUart1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSim868Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>svc_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.svc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svc_init &rArr; svcSim868Init &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSystickInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>task_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = task_init &rArr; taskSim868Init &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskTimerInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSchdInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>jsonAddValue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, json.o(.text.jsonAddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jsonAddValue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddInt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddFloat
</UL>

<P><STRONG><a name="[e8]"></a>mqttSend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mqtt.o(.text.mqttSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mqttSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSubscribe
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttPublish
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttHearbeat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttConnect
</UL>

<P><STRONG><a name="[ed]"></a>mqttSeq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt.o(.text.mqttSeq))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSubscribe
</UL>

<P><STRONG><a name="[88]"></a>are_settings_changed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bme280.o(.text.are_settings_changed))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[79]"></a>compensate_humidity</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, bme280.o(.text.compensate_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = compensate_humidity &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[78]"></a>compensate_pressure</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, bme280.o(.text.compensate_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[77]"></a>compensate_temperature</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, bme280.o(.text.compensate_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = compensate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[f1]"></a>fill_filter_settings</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bme280.o(.text.fill_filter_settings))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[f5]"></a>fill_osr_press_settings</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bme280.o(.text.fill_osr_press_settings))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
</UL>

<P><STRONG><a name="[f6]"></a>fill_osr_temp_settings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bme280.o(.text.fill_osr_temp_settings))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
</UL>

<P><STRONG><a name="[f2]"></a>fill_standby_settings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bme280.o(.text.fill_standby_settings))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[81]"></a>get_calib_data</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bme280.o(.text.get_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_calib_data &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_press_calib_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_humidity_calib_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[83]"></a>interleave_reg_addr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bme280.o(.text.interleave_reg_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = interleave_reg_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
</UL>

<P><STRONG><a name="[7b]"></a>null_ptr_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bme280.o(.text.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>

<P><STRONG><a name="[ee]"></a>parse_device_settings</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bme280.o(.text.parse_device_settings))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[91]"></a>parse_humidity_calib_data</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bme280.o(.text.parse_humidity_calib_data))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[90]"></a>parse_temp_press_calib_data</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, bme280.o(.text.parse_temp_press_calib_data))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[85]"></a>put_device_to_sleep</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bme280.o(.text.put_device_to_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_settings
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[ef]"></a>reload_device_settings</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bme280.o(.text.reload_device_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[8a]"></a>set_filter_standby_settings</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bme280.o(.text.set_filter_standby_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_filter_standby_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_standby_settings
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_filter_settings
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[f3]"></a>set_osr_humidity_settings</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bme280.o(.text.set_osr_humidity_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_osr_humidity_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
</UL>

<P><STRONG><a name="[f4]"></a>set_osr_press_temp_settings</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bme280.o(.text.set_osr_press_temp_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_temp_settings
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_press_settings
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
</UL>

<P><STRONG><a name="[89]"></a>set_osr_settings</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bme280.o(.text.set_osr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[86]"></a>write_power_mode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bme280.o(.text.write_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_power_mode &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[c6]"></a>halUart1Init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, hal_uart.o(.text.halUart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halUart1Init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[c9]"></a>halUartDmaInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_uart.o(.text.halUartDmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = halUartDmaInit &rArr; halUartDmaTxInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaTxInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaRxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[cc]"></a>halUartDmaRxInit</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal_uart.o(.text.halUartDmaRxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halUartDmaRxInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaInit
</UL>

<P><STRONG><a name="[cb]"></a>halUartDmaTxInit</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, hal_uart.o(.text.halUartDmaTxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halUartDmaTxInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartDmaInit
</UL>

<P><STRONG><a name="[d6]"></a>halUartGpiosInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, hal_uart.o(.text.halUartGpiosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = halUartGpiosInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUartInit
</UL>

<P><STRONG><a name="[95]"></a>halBme280Save</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_bme280.o(.text.halBme280Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = halBme280Save &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_forced_mode
</UL>

<P><STRONG><a name="[94]"></a>stream_sensor_data_forced_mode</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hal_bme280.o(.text.stream_sensor_data_forced_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = stream_sensor_data_forced_mode &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Save
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halBme280Poll
</UL>

<P><STRONG><a name="[24]"></a>user_delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_bme280.o(.text.user_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = user_delay_us &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_bme280.o(.text.halBme280Init)
</UL>
<P><STRONG><a name="[26]"></a>user_spi_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hal_bme280.o(.text.user_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = user_spi_read &rArr; halSpiEnable &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_bme280.o(.text.halBme280Init)
</UL>
<P><STRONG><a name="[25]"></a>user_spi_write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hal_bme280.o(.text.user_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = user_spi_write &rArr; halSpiEnable &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_bme280.o(.text.halBme280Init)
</UL>
<P><STRONG><a name="[96]"></a>halPM25Adc2Pm25</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_pm25.o(.text.halPM25Adc2Pm25))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = halPM25Adc2Pm25 &rArr; halPM25Adc2Voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Voltage
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Read
</UL>

<P><STRONG><a name="[97]"></a>halPM25Adc2Voltage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_pm25.o(.text.halPM25Adc2Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = halPM25Adc2Voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Adc2Pm25
</UL>

<P><STRONG><a name="[9b]"></a>halPM25AdcInit</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, hal_pm25.o(.text.halPM25AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = halPM25AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Init
</UL>

<P><STRONG><a name="[a5]"></a>halPM25Fitting</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hal_pm25.o(.text.halPM25Fitting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halPM25Fitting &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetFitValue
</UL>

<P><STRONG><a name="[a6]"></a>halPM25GetAdc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hal_pm25.o(.text.halPM25GetAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = halPM25GetAdc &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopOfConversion
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetFitValue
</UL>

<P><STRONG><a name="[ae]"></a>halPM25GetFitValue</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hal_pm25.o(.text.halPM25GetFitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = halPM25GetFitValue &rArr; halPM25GetAdc &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25GetAdc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Fitting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSystickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Read
</UL>

<P><STRONG><a name="[af]"></a>halPM25GpiosInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, hal_pm25.o(.text.halPM25GpiosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = halPM25GpiosInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25Init
</UL>

<P><STRONG><a name="[b5]"></a>halPM25ToAQIRefCN</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, hal_pm25.o(.text.halPM25ToAQIRefCN))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = halPM25ToAQIRefCN &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPM25ReadAsAQI
</UL>

<P><STRONG><a name="[29]"></a>svcSim868OnMsgTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, svc_sim868.o(.text.svcSim868OnMsgTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSim868OnMsgTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svc_sim868.o(.text.svcSim868Poll)
</UL>
<P><STRONG><a name="[10b]"></a>svcSim868QueueAdd</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, svc_sim868.o(.text.svcSim868QueueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSim868QueueAdd &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Sender
</UL>

<P><STRONG><a name="[28]"></a>svcSim868RunningTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, svc_sim868.o(.text.svcSim868RunningTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcSim868RunningTask &rArr; svcMsgWrite &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svc_sim868.o(.text.svcSim868Init)
</UL>
<P><STRONG><a name="[27]"></a>svcSim868Sender</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, svc_sim868.o(.text.svcSim868Sender))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcSim868Sender &rArr; svcMsgWrite &rArr; halSystickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868QueueAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMsgWrite
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svc_sim868.o(.text.svcSim868Init)
</UL>
<P><STRONG><a name="[2a]"></a>svcSim868TimeoutTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, svc_sim868.o(.text.svcSim868TimeoutTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSim868TimeoutTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svc_sim868.o(.text.svcSim868Sender)
</UL>
<P><STRONG><a name="[2e]"></a>taskSchdProxy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_schd.o(.text.taskSchdProxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = taskSchdProxy &rArr; svcSim868Poll &rArr; svcMsgRead &rArr; halUartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_schd.o(.text.taskSchdPoll)
</UL>
<P><STRONG><a name="[38]"></a>taskTimerStart</STRONG> (Thumb, 156 bytes, Stack size 144 bytes, task_timer.o(.text.taskTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = taskTimerStart &rArr; svcSensorPoll &rArr; halBme280Poll &rArr; stream_sensor_data_forced_mode &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonBuildNode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddInt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddFloat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorPoll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetTemp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetPressure
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetHumi
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSensorGetAQI
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_timer.o(.text.taskTimerInit)
</UL>
<P><STRONG><a name="[11c]"></a>taskSim868AddView</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868AddView))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = taskSim868AddView
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868TcpSendReq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868BtSetTxpwr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868Loop
</UL>

<P><STRONG><a name="[30]"></a>taskSim868ErrorHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskSim868ErrorHandler &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sim868.o(.text.taskSim868Init)
</UL>
<P><STRONG><a name="[11d]"></a>taskSim868GnssInfoParser</STRONG> (Thumb, 144 bytes, Stack size 168 bytes, task_sim868.o(.text.taskSim868GnssInfoParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = taskSim868GnssInfoParser &rArr; svcSim868Parser &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonBuildNode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonAddFloat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSim868Parser
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttReport
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewGnssHandler
</UL>

<P><STRONG><a name="[11e]"></a>taskSim868ImeiParser</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, task_sim868.o(.text.taskSim868ImeiParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = taskSim868ImeiParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBasisHandler
</UL>

<P><STRONG><a name="[31]"></a>taskSim868IncomingHandler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, task_sim868.o(.text.taskSim868IncomingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = taskSim868IncomingHandler &rArr; taskSim868ViewGnssHandler &rArr; taskSim868GnssInfoParser &rArr; svcSim868Parser &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttFetch
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewTcpClientHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewGnssHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBtHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewBasisHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sim868.o(.text.taskSim868Init)
</UL>
<P><STRONG><a name="[12a]"></a>taskSim868LQIParser</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868LQIParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = taskSim868LQIParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
</UL>

<P><STRONG><a name="[33]"></a>taskSim868Loop</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, task_sim868.o(.text.taskSim868Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = taskSim868Loop &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868AddView
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sim868.o(.text.taskSim868Init)
</UL>
<P><STRONG><a name="[12b]"></a>taskSim868NwkIpParser</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, task_sim868.o(.text.taskSim868NwkIpParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = taskSim868NwkIpParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
</UL>

<P><STRONG><a name="[12c]"></a>taskSim868NwkRegisterParser</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868NwkRegisterParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskSim868NwkRegisterParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ViewNetworkHandler
</UL>

<P><STRONG><a name="[2f]"></a>taskSim868TimeoutHandler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, task_sim868.o(.text.taskSim868TimeoutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = taskSim868TimeoutHandler &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sim868.o(.text.taskSim868Init)
</UL>
<P><STRONG><a name="[121]"></a>taskSim868ViewBasisHandler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868ViewBasisHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = taskSim868ViewBasisHandler &rArr; taskSim868ImeiParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868ImeiParser
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[32]"></a>taskSim868ViewBasisStart</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewBasisStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = taskSim868ViewBasisStart &rArr; atspSend &rArr; atspSendStream
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
</UL>
<BR>[Address Reference Count : 4]<UL><LI> task_sim868.o(.text.taskSim868TimeoutHandler)
<LI> task_sim868.o(.text.taskSim868Init)
<LI> task_sim868.o(.text.taskSim868ViewNetworkHandler)
<LI> task_sim868.o(.text.taskSim868ViewTcpClientHandler)
</UL>
<P><STRONG><a name="[125]"></a>taskSim868ViewBtHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewBtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = taskSim868ViewBtHandler &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[34]"></a>taskSim868ViewBtStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewBtStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = taskSim868ViewBtStart &rArr; atspSetBtTxPwr &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetBtTxPwr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
</UL>
<BR>[Address Reference Count : 4]<UL><LI> task_sim868.o(.text.taskSim868Loop)
<LI> task_sim868.o(.text.taskSim868ViewBasisHandler)
<LI> task_sim868.o(.text.taskSim868ViewNetworkHandler)
<LI> task_sim868.o(.text.taskSim868ViewTcpClientHandler)
</UL>
<P><STRONG><a name="[122]"></a>taskSim868ViewGnssHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewGnssHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = taskSim868ViewGnssHandler &rArr; taskSim868GnssInfoParser &rArr; svcSim868Parser &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868GnssInfoParser
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[37]"></a>taskSim868ViewGnssStart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewGnssStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = taskSim868ViewGnssStart &rArr; atspSend &rArr; atspSendStream
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
</UL>
<BR>[Address Reference Count : 4]<UL><LI> task_sim868.o(.text.taskSim868ViewBasisHandler)
<LI> task_sim868.o(.text.taskSim868ViewNetworkHandler)
<LI> task_sim868.o(.text.taskSim868ViewTcpClientHandler)
<LI> task_sim868.o(.text.taskSim868ViewBtHandler)
</UL>
<P><STRONG><a name="[124]"></a>taskSim868ViewNetworkHandler</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868ViewNetworkHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = taskSim868ViewNetworkHandler &rArr; taskSim868NwkIpParser &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkRegisterParser
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868NwkIpParser
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868LQIParser
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[36]"></a>taskSim868ViewNetworkStart</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewNetworkStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = taskSim868ViewNetworkStart &rArr; atspSetAPN &rArr; atspSend &rArr; atspSendStream
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSetAPN
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
</UL>
<BR>[Address Reference Count : 4]<UL><LI> task_sim868.o(.text.taskSim868Loop)
<LI> task_sim868.o(.text.taskSim868ViewBasisHandler)
<LI> task_sim868.o(.text.taskSim868ViewNetworkHandler)
<LI> task_sim868.o(.text.taskSim868ViewTcpClientHandler)
</UL>
<P><STRONG><a name="[123]"></a>taskSim868ViewTcpClientHandler</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, task_sim868.o(.text.taskSim868ViewTcpClientHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskSim868ViewTcpClientHandler &rArr; svcTaskAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTaskAdd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868IncomingHandler
</UL>

<P><STRONG><a name="[35]"></a>taskSim868ViewTcpClientStart</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, task_sim868.o(.text.taskSim868ViewTcpClientStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = taskSim868ViewTcpClientStart &rArr; atspTcpConnect &rArr; itoa &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpPreSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspTcpConnect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSendStream
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atspSend
</UL>
<BR>[Address Reference Count : 5]<UL><LI> task_sim868.o(.text.taskSim868Loop)
<LI> task_sim868.o(.text.taskSim868ViewBasisHandler)
<LI> task_sim868.o(.text.taskSim868ViewNetworkHandler)
<LI> task_sim868.o(.text.taskSim868ViewTcpClientHandler)
<LI> task_sim868.o(.text.taskSim868ViewBtHandler)
</UL>
<P><STRONG><a name="[2c]"></a>taskMqttLoop</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, task_mqtt.o(.text.taskMqttLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = taskMqttLoop &rArr; mqttSubscribe &rArr; mqttSend
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttSubscribe
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttHearbeat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttConnect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_mqtt.o(.text.taskMqttInit)
</UL>
<P><STRONG><a name="[11a]"></a>taskMqttOnErr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, task_mqtt.o(.text.taskMqttOnErr))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttSender
</UL>

<P><STRONG><a name="[2d]"></a>taskMqttOnSend</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, task_mqtt.o(.text.taskMqttOnSend))
<BR>[Address Reference Count : 1]<UL><LI> task_mqtt.o(.text.taskMqttSender)
</UL>
<P><STRONG><a name="[2b]"></a>taskMqttSender</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_mqtt.o(.text.taskMqttSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = taskMqttSender &rArr; taskSim868TcpSendReq &rArr; taskSim868AddView
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMqttOnErr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskSim868TcpSendReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_mqtt.o(.text.taskMqttInit)
</UL>
<P><STRONG><a name="[56]"></a>_local_sscanf</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[5d]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
